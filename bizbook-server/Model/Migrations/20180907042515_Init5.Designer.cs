// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(BizBookInventoryContext))]
    [Migration("20180907042515_Init5")]
    partial class Init5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Model.AccountHead", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("AccountHeadType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountHeadType")
                        .HasName("IX_AccountHeadType");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_AccountHeadName");

                    b.HasIndex("Remarks")
                        .HasName("IX_AccountHeadRemarks");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("AccountHeads");
                });

            modelBuilder.Entity("Model.Model.AccountInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("AccountInfoType");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("AccountTitle")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AccountInfoType")
                        .HasName("IX_AccountInfoType");

                    b.HasIndex("AccountTitle")
                        .HasName("IX_AccountTitle");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("AccountInfoes");
                });

            modelBuilder.Entity("Model.Model.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(172)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SpecialNote")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(700)");

                    b.Property<string>("Thana")
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("CustomerId")
                        .HasName("IX_CustomerId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Model.Model.Brand", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BrandCode")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MadeInCountry")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Model.Model.Courier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("CourierShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CourierShopName")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("CourierShopPhone")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CourierShopId")
                        .HasName("IX_CourierShopId");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("Model.Model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MembershipCardNo")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NationalId")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Point");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.Property<string>("University")
                        .HasColumnType("varchar(32)");

                    b.Property<int>("WcId");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Email")
                        .HasName("IX_Email");

                    b.HasIndex("MembershipCardNo")
                        .HasName("IX_MembershipCardNo");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("NationalId")
                        .HasName("IX_NationalId");

                    b.HasIndex("OrdersCount")
                        .HasName("IX_OrdersCount");

                    b.HasIndex("OtherAmount")
                        .HasName("IX_OtherAmount");

                    b.HasIndex("Phone")
                        .HasName("IX_Phone");

                    b.HasIndex("Point")
                        .HasName("IX_Point");

                    b.HasIndex("ProductAmount")
                        .HasName("IX_ProductAmount");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("TotalAmount")
                        .HasName("IX_TotalAmount");

                    b.HasIndex("TotalDiscount")
                        .HasName("IX_TotalDiscount");

                    b.HasIndex("TotalDue")
                        .HasName("IX_TotalDue");

                    b.HasIndex("TotalPaid")
                        .HasName("IX_TotalPaid");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Model.Model.Damage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.ToTable("Damages");
                });

            modelBuilder.Entity("Model.Model.Dealer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("OrdersCount")
                        .HasName("IX_OrdersCount");

                    b.HasIndex("OtherAmount")
                        .HasName("IX_OtherAmount");

                    b.HasIndex("Phone")
                        .HasName("IX_Phone");

                    b.HasIndex("ProductAmount")
                        .HasName("IX_ProductAmount");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("TotalAmount")
                        .HasName("IX_TotalAmount");

                    b.HasIndex("TotalDiscount")
                        .HasName("IX_TotalDiscount");

                    b.HasIndex("TotalDue")
                        .HasName("IX_TotalDue");

                    b.HasIndex("TotalPaid")
                        .HasName("IX_TotalPaid");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("Model.Model.DealerProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DealerId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Due");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Paid");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("DealerId")
                        .HasName("IX_DealerId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("DealerProducts");
                });

            modelBuilder.Entity("Model.Model.DealerProductTransaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DealerProductId")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("DealerProductId")
                        .HasName("IX_DealerProductId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("TransactionId")
                        .HasName("IX_TransactionId");

                    b.ToTable("DealerProductTransactions");
                });

            modelBuilder.Entity("Model.Model.District", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NameBn")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Model.Model.EmployeeInfo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Salary");

                    b.Property<double>("SaleAchivedAmount");

                    b.Property<double>("SaleTargetAmount");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Email")
                        .HasName("IX_Email");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("Phone")
                        .HasName("IX_Phone");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.ToTable("EmployeeInfoes");
                });

            modelBuilder.Entity("Model.Model.HookDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("HookName")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SmsHookId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("HookName")
                        .HasName("IX_HookName");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SmsHookId")
                        .HasName("IX_SmsHookId");

                    b.ToTable("HookDetails");
                });

            modelBuilder.Entity("Model.Model.Installment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CashPriceAmount");

                    b.Property<double>("CashPriceDueAmount");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DownPaymentAmount");

                    b.Property<double>("DownPaymentPercent");

                    b.Property<double>("InstallmentDueAmount");

                    b.Property<string>("InstallmentMonth")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("InstallmentPerMonthAmount");

                    b.Property<double>("InstallmentTotalAmount");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProfitAmount");

                    b.Property<double>("ProfitAmountPerMonth");

                    b.Property<double>("ProfitPercent");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("SaleType");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("Model.Model.InstallmentDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DueAmount");

                    b.Property<string>("InstallmentId")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PaidAmount");

                    b.Property<DateTime?>("PaidDate");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ScheduledAmount");

                    b.Property<DateTime>("ScheduledDate");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TansactionId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("InstallmentId")
                        .HasName("IX_InstallmentId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("SaleId")
                        .HasName("IX_SaleId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("TansactionId")
                        .HasName("IX_TansactionId");

                    b.ToTable("InstallmentDetails");
                });

            modelBuilder.Entity("Model.Model.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductGroupId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WcId");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("ProductGroupId")
                        .HasName("IX_ProductGroupId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WcId")
                        .HasName("IX_WcId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Model.Model.ProductDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BarCode")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("BrandId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPrice");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DealerPrice");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ExpireInDays");

                    b.Property<bool>("HasExpiryDate");

                    b.Property<bool>("HasUniqueSerial");

                    b.Property<bool>("HasWarrenty");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MinimumStockToNotify");

                    b.Property<string>("Model")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("OnHand");

                    b.Property<string>("Permalink")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductCategoryId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Purchased");

                    b.Property<string>("RelatedIds")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("SalePrice");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Sold");

                    b.Property<int>("StartingInventory");

                    b.Property<string>("Tags")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WcCategoryId");

                    b.Property<int>("WcId");

                    b.Property<string>("WcType")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WcVariationId");

                    b.Property<string>("WcVariationOption")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcVariationPermalink")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Year")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("BarCode")
                        .HasName("IX_BarCode");

                    b.HasIndex("BrandId")
                        .HasName("IX_BrandId");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("ProductCategoryId")
                        .HasName("IX_ProductCategoryId");

                    b.HasIndex("ProductCode")
                        .HasName("IX_ProductCode");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WcCategoryId")
                        .HasName("IX_WcCategoryId");

                    b.HasIndex("WcId")
                        .HasName("IX_WcId");

                    b.HasIndex("WcVariationId")
                        .HasName("IX_WcVariationId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Model.Model.ProductGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Model.Model.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Alt")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("Position");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Src")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("WcId");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Model.Model.ProductSerial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PurchaseDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("PurchaseDetailId")
                        .HasName("IX_PurchaseDetailId");

                    b.HasIndex("SerialNumber")
                        .HasName("IX_SerialNumber");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("ProductSerials");
                });

            modelBuilder.Entity("Model.Model.Purchase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("DueAmount");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderReferenceNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("OtherAmount");

                    b.Property<double>("PaidAmount");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShipmentTrackingNo")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ShippingAmount");

                    b.Property<string>("ShippingProvider")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("OrderNumber")
                        .HasName("IX_OrderNumber");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Model.Model.PurchaseDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPricePerUnit");

                    b.Property<double>("CostTotal");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Paid");

                    b.Property<double>("Payable");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PurchaseId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("PurchaseId")
                        .HasName("IX_PurchaseId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("Model.Model.Sale", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostAmount");

                    b.Property<string>("CourierName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CourierShopId")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("CustomerArea")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("varchar(800)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DealerId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("DeliveryChargeAmount");

                    b.Property<string>("DeliveryTrackingNo")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliverymanId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeliverymanName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeliverymanPhone")
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountAmount");

                    b.Property<double>("DueAmount");

                    b.Property<string>("EmployeeInfoId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("EmployeeInfoName")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("EstimatedDeliveryDate");

                    b.Property<string>("Guarantor1Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Guarantor2Id")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("InstallmentId")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDealerSale");

                    b.Property<bool>("IsTaggedSale");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderReferenceNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrderState");

                    b.Property<double>("OtherAmount");

                    b.Property<double>("PaidAmount");

                    b.Property<double>("PaidByCashAmount");

                    b.Property<double>("PaidByOtherAmount");

                    b.Property<string>("ParentSaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PayableTotalAmount");

                    b.Property<double>("PaymentServiceChargeAmount");

                    b.Property<double>("ProductAmount");

                    b.Property<double>("ProfitAmount");

                    b.Property<double>("ProfitPercent");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("RequiredDeliveryDateByCustomer");

                    b.Property<string>("RequiredDeliveryTimeByCustomer")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("SaleChannel");

                    b.Property<int>("SaleFrom");

                    b.Property<string>("SaleTag")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TaxAmount");

                    b.Property<double>("TotalAmount");

                    b.Property<int>("Version");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcCartHash")
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("WcCustomerId");

                    b.Property<int?>("WcId");

                    b.Property<string>("WcOrderKey")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcOrderStatus")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .HasName("IX_AddressId");

                    b.HasIndex("CourierShopId")
                        .HasName("IX_CourierShopId");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("CustomerId")
                        .HasName("IX_CustomerId");

                    b.HasIndex("DealerId")
                        .HasName("IX_DealerId");

                    b.HasIndex("EmployeeInfoId")
                        .HasName("IX_EmployeeInfoId");

                    b.HasIndex("InstallmentId")
                        .HasName("IX_InstallmentId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("OrderNumber")
                        .HasName("IX_OrderNumber");

                    b.HasIndex("OrderState")
                        .HasName("IX_OrderState");

                    b.HasIndex("SaleChannel")
                        .HasName("IX_SaleChannel");

                    b.HasIndex("SaleFrom")
                        .HasName("IX_SaleFrom");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.HasIndex("WcCustomerId")
                        .HasName("IX_WcCustomerId");

                    b.HasIndex("WcId")
                        .HasName("IX_WcId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Model.Model.SaleDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("CostPricePerUnit");

                    b.Property<double>("CostTotal");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("DiscountTotal");

                    b.Property<double>("DueAmount");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsReturned");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PaidAmount");

                    b.Property<double>("PriceTotal");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProductSerialNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReturnReason")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("SalePricePerUnit");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Total");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<int?>("WcId");

                    b.Property<int?>("WcProductId");

                    b.Property<int?>("WcProductVariationId");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("SaleId")
                        .HasName("IX_SaleId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.HasIndex("WcId")
                        .HasName("IX_WcId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("Model.Model.SaleState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SaleId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("SaleId")
                        .HasName("IX_SaleId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("State")
                        .HasName("IX_State");

                    b.ToTable("SaleStates");
                });

            modelBuilder.Entity("Model.Model.Sms", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("Ismasked");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReasonId")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ReasonType");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReceiverNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("SmsReceiverType");

                    b.Property<string>("Text")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ReasonId")
                        .HasName("IX_ReasonId");

                    b.HasIndex("ReasonType")
                        .HasName("IX_ReasonType");

                    b.HasIndex("ReceiverId")
                        .HasName("IX_ReceiverId");

                    b.HasIndex("ReceiverNumber")
                        .HasName("IX_ReceiverNumber");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("Model.Model.SmsHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SmsId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Text")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("SmsHistories");
                });

            modelBuilder.Entity("Model.Model.SmsHook", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("BizSmsHook");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("SmsHooks");
                });

            modelBuilder.Entity("Model.Model.StockTransfer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DeliveryTrackingNo")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeliverymanId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeliverymanName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DeliverymanPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("DestinationWarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("EstimatedDeliveryDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderReferenceNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SourceWarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TransferState");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("DestinationWarehouseId")
                        .HasName("IX_DestinationWarehouseId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("OrderNumber")
                        .HasName("IX_OrderNumber");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SourceWarehouseId")
                        .HasName("IX_SourceWarehouseId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("Model.Model.StockTransferDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DestinationWarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("PriceTotal");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(256)");

                    b.Property<double>("SalePricePerUnit");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SourceWarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StockTransferId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("DestinationWarehouseId")
                        .HasName("IX_DestinationWarehouseId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SourceWarehouseId")
                        .HasName("IX_SourceWarehouseId");

                    b.HasIndex("StockTransferId")
                        .HasName("IX_StockTransferId");

                    b.ToTable("StockTransferDetails");
                });

            modelBuilder.Entity("Model.Model.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVerified");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("OrdersCount");

                    b.Property<double>("OtherAmount");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("ProductAmount");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId1")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SupplierShopId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalAmount");

                    b.Property<double>("TotalDiscount");

                    b.Property<double>("TotalDue");

                    b.Property<double>("TotalPaid");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("OrdersCount")
                        .HasName("IX_OrdersCount");

                    b.HasIndex("OtherAmount")
                        .HasName("IX_OtherAmount");

                    b.HasIndex("Phone")
                        .HasName("IX_Phone");

                    b.HasIndex("ProductAmount")
                        .HasName("IX_ProductAmount");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("ShopId1")
                        .HasName("IX_Shop_Id");

                    b.HasIndex("SupplierShopId")
                        .HasName("IX_SupplierShopId");

                    b.HasIndex("TotalAmount")
                        .HasName("IX_TotalAmount");

                    b.HasIndex("TotalDiscount")
                        .HasName("IX_TotalDiscount");

                    b.HasIndex("TotalDue")
                        .HasName("IX_TotalDue");

                    b.HasIndex("TotalPaid")
                        .HasName("IX_TotalPaid");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Model.Model.SupplierProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<double>("Due");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Paid");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Quantity");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SupplierId")
                        .HasName("IX_SupplierId");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("Model.Model.SupplierProductTransaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("SupplierProductId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("SupplierProductId")
                        .HasName("IX_SupplierProductId");

                    b.HasIndex("TransactionId")
                        .HasName("IX_TransactionId");

                    b.ToTable("SupplierProductTransactions");
                });

            modelBuilder.Entity("Model.Model.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccountHeadId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccountHeadName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("AccountInfoId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Amount");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ParentId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ParentName")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("PaymentGatewayService");

                    b.Property<string>("PaymentGatewayServiceName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("TransactionDate");

                    b.Property<int>("TransactionFlowType");

                    b.Property<int>("TransactionFor");

                    b.Property<int>("TransactionMedium");

                    b.Property<string>("TransactionMediumName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TransactionWith");

                    b.HasKey("Id");

                    b.HasIndex("AccountHeadId")
                        .HasName("IX_AccountHeadId");

                    b.HasIndex("AccountHeadName")
                        .HasName("IX_AccountHeadName");

                    b.HasIndex("AccountInfoId")
                        .HasName("IX_AccountInfoId");

                    b.HasIndex("Amount")
                        .HasName("IX_Amount");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("OrderId")
                        .HasName("IX_OrderId");

                    b.HasIndex("OrderNumber")
                        .HasName("IX_OrderNumber");

                    b.HasIndex("ParentId")
                        .HasName("IX_ParentId");

                    b.HasIndex("ParentName")
                        .HasName("IX_ParentName");

                    b.HasIndex("PaymentGatewayService")
                        .HasName("IX_PaymentGatewayService");

                    b.HasIndex("PaymentGatewayServiceName")
                        .HasName("IX_PaymentGatewayServiceName");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("TransactionFlowType")
                        .HasName("IX_TransactionFlowType");

                    b.HasIndex("TransactionFor")
                        .HasName("IX_TransactionFor");

                    b.HasIndex("TransactionMedium")
                        .HasName("IX_TransactionMedium");

                    b.HasIndex("TransactionMediumName")
                        .HasName("IX_TransactionMediumName");

                    b.HasIndex("TransactionNumber")
                        .HasName("IX_TransactionNumber");

                    b.HasIndex("TransactionWith")
                        .HasName("IX_TransactionWith");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Model.Model.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("Model.Model.WarehouseProduct", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MinimumStockToNotify");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("OnHand");

                    b.Property<string>("ProductDetailId")
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Purchased");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Sold");

                    b.Property<int>("StartingInventory");

                    b.Property<double>("TransferredIn");

                    b.Property<double>("TransferredOut");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ProductDetailId")
                        .HasName("IX_ProductDetailId");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.ToTable("WarehouseProducts");
                });

            modelBuilder.Entity("Model.Model.WarehouseZone", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ZoneId")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId")
                        .HasName("IX_ShopId");

                    b.HasIndex("WarehouseId")
                        .HasName("IX_WarehouseId");

                    b.HasIndex("ZoneId")
                        .HasName("IX_ZoneId");

                    b.ToTable("WarehouseZones");
                });

            modelBuilder.Entity("Model.Model.Zone", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("DistrictId")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("DistrictId")
                        .HasName("IX_DistrictId");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("ShopId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Model.Shops.Shop", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("About")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Area")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ChalanName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonDesignation")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ContactPersonPhone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<float>("DeliveryCharge");

                    b.Property<string>("District")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<string>("Facebook")
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("HasDeliveryChain");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAutoAddToCart");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsShowOrderNumber");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ReceiptName")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Thana")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("TotalUsers");

                    b.Property<string>("WcKey")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcSecret")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcUrl")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("WcWebhookSource")
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Website")
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonDesignation")
                        .HasName("IX_ContactPersonDesignation");

                    b.HasIndex("ContactPersonName")
                        .HasName("IX_ContactPersonName");

                    b.HasIndex("ContactPersonPhone")
                        .HasName("IX_ContactPersonPhone");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Email")
                        .HasName("IX_Email");

                    b.HasIndex("Facebook")
                        .HasName("IX_Facebook");

                    b.HasIndex("Modified")
                        .HasName("IX_Modified");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_ShopName")
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("Phone")
                        .HasName("IX_ShopPhone");

                    b.HasIndex("WcKey")
                        .HasName("IX_WcKey");

                    b.HasIndex("WcSecret")
                        .HasName("IX_WcSecret");

                    b.HasIndex("WcUrl")
                        .HasName("IX_WcUrl");

                    b.HasIndex("WcWebhookSource")
                        .HasName("IX_WcWebhookSource");

                    b.HasIndex("Website")
                        .HasName("IX_Website");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("Model.Model.AccountHead", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("AccountHeads")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.AccountInfo", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("AccountInfoes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Address", b =>
                {
                    b.HasOne("Model.Model.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Addresses")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Brand", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Brands")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Courier", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Couriers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Customer", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Customers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Damage", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("Damages")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Damages")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("Damages")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.Dealer", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Dealers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.DealerProduct", b =>
                {
                    b.HasOne("Model.Model.Dealer", "Dealer")
                        .WithMany("DealerProducts")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("DealerProducts")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("DealerProducts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.DealerProductTransaction", b =>
                {
                    b.HasOne("Model.Model.DealerProduct", "DealerProduct")
                        .WithMany("DealerProductTransactions")
                        .HasForeignKey("DealerProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("DealerProductTransactions")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Transaction", "Transaction")
                        .WithMany("DealerProductTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.EmployeeInfo", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("EmployeeInfoes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("EmployeeInfoes")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.HookDetail", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("HookDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.SmsHook", "SmsHook")
                        .WithMany("HookDetails")
                        .HasForeignKey("SmsHookId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Installment", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Installments")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.InstallmentDetail", b =>
                {
                    b.HasOne("Model.Model.Installment", "Installment")
                        .WithMany("InstallmentDetails")
                        .HasForeignKey("InstallmentId");

                    b.HasOne("Model.Model.Sale", "Sale")
                        .WithMany("InstallmentDetails")
                        .HasForeignKey("SaleId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("InstallmentDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Transaction", "Tansaction")
                        .WithMany("InstallmentDetails")
                        .HasForeignKey("TansactionId");
                });

            modelBuilder.Entity("Model.Model.ProductCategory", b =>
                {
                    b.HasOne("Model.Model.ProductGroup", "ProductGroup")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.ProductDetail", b =>
                {
                    b.HasOne("Model.Model.Brand", "Brand")
                        .WithMany("ProductDetails")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.ProductCategory", "ProductCategory")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.ProductGroup", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.ProductImage", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductImages")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.ProductSerial", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("ProductSerials")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.PurchaseDetail", "PurchaseDetail")
                        .WithMany("ProductSerials")
                        .HasForeignKey("PurchaseDetailId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("ProductSerials")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Purchase", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Purchases")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("Purchases")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.PurchaseDetail", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.Sale", b =>
                {
                    b.HasOne("Model.Model.Address", "Address")
                        .WithMany("Sales")
                        .HasForeignKey("AddressId");

                    b.HasOne("Model.Model.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Model.Model.Dealer", "Dealer")
                        .WithMany("Sales")
                        .HasForeignKey("DealerId");

                    b.HasOne("Model.Model.EmployeeInfo", "EmployeeInfo")
                        .WithMany("Sales")
                        .HasForeignKey("EmployeeInfoId");

                    b.HasOne("Model.Model.Installment", "Installment")
                        .WithMany("Sales")
                        .HasForeignKey("InstallmentId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Sales")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("Sales")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.SaleDetail", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("SaleDetails")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.SaleState", b =>
                {
                    b.HasOne("Model.Model.Sale", "Sale")
                        .WithMany("SaleStates")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SaleStates")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Sms", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Sms")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.SmsHistory", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SmsHistories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.SmsHook", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SmsHooks")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.StockTransfer", b =>
                {
                    b.HasOne("Model.Model.Warehouse", "DestinationWarehouse")
                        .WithMany("StockTransfersDestinationWarehouse")
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("StockTransfers")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "SourceWarehouse")
                        .WithMany("StockTransfersSourceWarehouse")
                        .HasForeignKey("SourceWarehouseId");
                });

            modelBuilder.Entity("Model.Model.StockTransferDetail", b =>
                {
                    b.HasOne("Model.Model.Warehouse", "DestinationWarehouse")
                        .WithMany("StockTransferDetailsDestinationWarehouse")
                        .HasForeignKey("DestinationWarehouseId");

                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("StockTransferDetails")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("StockTransferDetails")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "SourceWarehouse")
                        .WithMany("StockTransferDetailsSourceWarehouse")
                        .HasForeignKey("SourceWarehouseId");

                    b.HasOne("Model.Model.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferDetails")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Supplier", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SuppliersShop")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "ShopId1Navigation")
                        .WithMany("SuppliersShopId1Navigation")
                        .HasForeignKey("ShopId1");

                    b.HasOne("Model.Shops.Shop", "SupplierShop")
                        .WithMany("SuppliersSupplierShop")
                        .HasForeignKey("SupplierShopId");
                });

            modelBuilder.Entity("Model.Model.SupplierProduct", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.SupplierProductTransaction", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("SupplierProductTransactions")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.SupplierProduct", "SupplierProduct")
                        .WithMany("SupplierProductTransactions")
                        .HasForeignKey("SupplierProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Transaction", "Transaction")
                        .WithMany("SupplierProductTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Transaction", b =>
                {
                    b.HasOne("Model.Model.AccountHead", "AccountHead")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountHeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.AccountInfo", "AccountInfo")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountInfoId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Transactions")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.Warehouse", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("Warehouses")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Model.WarehouseProduct", b =>
                {
                    b.HasOne("Model.Model.ProductDetail", "ProductDetail")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ProductDetailId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("Model.Model.WarehouseZone", b =>
                {
                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany("WarehouseZones")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Model.Model.Warehouse", "Warehouse")
                        .WithMany("WarehouseZones")
                        .HasForeignKey("WarehouseId");

                    b.HasOne("Model.Model.Zone", "Zone")
                        .WithMany("WarehouseZones")
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("Model.Model.Zone", b =>
                {
                    b.HasOne("Model.Model.District", "District")
                        .WithMany("Zones")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Model.Shops.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
